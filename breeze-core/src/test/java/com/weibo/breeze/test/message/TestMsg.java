/*
 * Generated by breeze-generator (https://github.com/weibreeze/breeze-generator)
 * Schema: testmsg.breeze
 * Date: 2019/6/6
 */
package com.weibo.breeze.test.message;

import com.weibo.breeze.*;
import com.weibo.breeze.message.Message;
import com.weibo.breeze.message.Schema;

import java.lang.reflect.Type;
import java.util.*;

public class TestMsg implements Message {
    private static final Schema schema = new Schema();
    private static final Map<String, Type> genericTypes = new HashMap<>();
    private int myInt;
    private String myString;
    private Map<String, TestSubMsg> myMap;
    private List<TestSubMsg> myArray;
    private TestSubMsg subMsg;
    private MyEnum myEnum;
    private List<MyEnum> enumArray;

    static {
        try {
            schema.setName("motan.TestMsg")
                    .putField(new Schema.Field(1, "myInt", "int32"))
                    .putField(new Schema.Field(2, "myString", "string"))
                    .putField(new Schema.Field(3, "myMap", "map<string, TestSubMsg>"))
                    .putField(new Schema.Field(4, "myArray", "array<TestSubMsg>"))
                    .putField(new Schema.Field(5, "subMsg", "TestSubMsg"))
                    .putField(new Schema.Field(6, "myEnum", "MyEnum"))
                    .putField(new Schema.Field(7, "enumArray", "array<MyEnum>"));
        } catch (BreezeException ignore) {}
        Breeze.putMessageInstance(schema.getName(), new TestMsg());
        Breeze.addGenericType(genericTypes, TestMsg.class, "myMap");
        Breeze.addGenericType(genericTypes, TestMsg.class, "myArray");
        Breeze.addGenericType(genericTypes, TestMsg.class, "enumArray");
    }

    @Override
    public void writeToBuf(BreezeBuffer buffer) throws BreezeException {
        BreezeWriter.writeMessage(buffer, schema.getName(), () -> {
            BreezeWriter.writeMessageField(buffer, 1, myInt);
            BreezeWriter.writeMessageField(buffer, 2, myString);
            BreezeWriter.writeMessageField(buffer, 3, myMap);
            BreezeWriter.writeMessageField(buffer, 4, myArray);
            BreezeWriter.writeMessageField(buffer, 5, subMsg);
            BreezeWriter.writeMessageField(buffer, 6, myEnum);
            BreezeWriter.writeMessageField(buffer, 7, enumArray);
        });
    }

    @Override
    public Message readFromBuf(BreezeBuffer buffer) throws BreezeException {
        BreezeReader.readMessage(buffer, false, (int index) -> {
            switch (index) {
                case 1:
                    myInt = BreezeReader.readObject(buffer, int.class);
                    break;
                case 2:
                    myString = BreezeReader.readObject(buffer, String.class);
                    break;
                case 3:
                    myMap = new HashMap<>();
                    BreezeReader.readMapByType(buffer, myMap, genericTypes.get("myMap" + Breeze.KEY_TYPE_SUFFIX), genericTypes.get("myMap" + Breeze.VALUE_TYPE_SUFFIX));
                    break;
                case 4:
                    myArray = new ArrayList<>();
                    BreezeReader.readCollectionByType(buffer, myArray, genericTypes.get("myArray" + Breeze.VALUE_TYPE_SUFFIX));
                    break;
                case 5:
                    subMsg = BreezeReader.readObject(buffer, TestSubMsg.class);
                    break;
                case 6:
                    myEnum = BreezeReader.readObject(buffer, MyEnum.class);
                    break;
                case 7:
                    enumArray = new ArrayList<>();
                    BreezeReader.readCollectionByType(buffer, enumArray, genericTypes.get("enumArray" + Breeze.VALUE_TYPE_SUFFIX));
                    break;
                default: //skip unknown field
                    BreezeReader.readObject(buffer, Object.class);
            }
        });
        return this;
    }

    @Override
    public String getName() { return schema.getName(); }

    @Override
    public String getAlias() { return schema.getAlias(); }

    @Override
    public Schema getSchema() { return schema; }

    @Override
    public Message getDefaultInstance() { return new TestMsg(); }

    public int getMyInt() { return myInt; }

    public void setMyInt(int myInt) { this.myInt = myInt; }

    public String getMyString() { return myString; }

    public void setMyString(String myString) { this.myString = myString; }

    public Map<String, TestSubMsg> getMyMap() { return myMap; }

    public void setMyMap(Map<String, TestSubMsg> myMap) { this.myMap = myMap; }

    public List<TestSubMsg> getMyArray() { return myArray; }

    public void setMyArray(List<TestSubMsg> myArray) { this.myArray = myArray; }

    public TestSubMsg getSubMsg() { return subMsg; }

    public void setSubMsg(TestSubMsg subMsg) { this.subMsg = subMsg; }

    public MyEnum getMyEnum() { return myEnum; }

    public void setMyEnum(MyEnum myEnum) { this.myEnum = myEnum; }

    public List<MyEnum> getEnumArray() { return enumArray; }

    public void setEnumArray(List<MyEnum> enumArray) { this.enumArray = enumArray; }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        TestMsg testMsg = (TestMsg) o;

        if (myInt != testMsg.myInt) return false;
        if (myString != null ? !myString.equals(testMsg.myString) : testMsg.myString != null) return false;
        if (myMap != null ? !myMap.equals(testMsg.myMap) : testMsg.myMap != null) return false;
        if (myArray != null ? !myArray.equals(testMsg.myArray) : testMsg.myArray != null) return false;
        if (subMsg != null ? !subMsg.equals(testMsg.subMsg) : testMsg.subMsg != null) return false;
        if (myEnum != testMsg.myEnum) return false;
        return enumArray != null ? enumArray.equals(testMsg.enumArray) : testMsg.enumArray == null;
    }

    @Override
    public int hashCode() {
        int result = myInt;
        result = 31 * result + (myString != null ? myString.hashCode() : 0);
        result = 31 * result + (myMap != null ? myMap.hashCode() : 0);
        result = 31 * result + (myArray != null ? myArray.hashCode() : 0);
        result = 31 * result + (subMsg != null ? subMsg.hashCode() : 0);
        result = 31 * result + (myEnum != null ? myEnum.hashCode() : 0);
        result = 31 * result + (enumArray != null ? enumArray.hashCode() : 0);
        return result;
    }
}
